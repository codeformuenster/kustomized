apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: gangway
  annotations:
    nginx.ingress.kubernetes.io/proxy-buffer-size: "64k"
spec:
  rules:
  - host: gangway.example.com
    http:
      paths:
      - backend:
          serviceName: gangway
          servicePort: http
  tls:
  - secretName: gangway-tls
    hosts:
    - gangway.example.com

---
apiVersion: certmanager.k8s.io/v1alpha1
kind: Certificate
metadata:
  name: gangway
  labels:
    app.kubernetes.io/name: gangway
    # app.kubernetes.io/component: server
spec:
  secretName: gangway-tls
  commonName: gangway.example.com
  issuerRef:
    kind: ClusterIssuer
    name: letsencrypt

---
kind: Service
apiVersion: v1
metadata:
  name: gangway
  namespace: gangway
  labels:
    app: gangway
spec:
  type: ClusterIP
  ports:
  - name: "http"
    protocol: TCP
    port: 80
    targetPort: "http"
  selector:
    app: gangway

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gangway
  namespace: gangway
  labels:
    app: gangway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gangway
  strategy:
  template:
    metadata:
      labels:
        app: gangway
    spec:
      containers:
      - name: gangway
        image: gcr.io/heptio-images/gangway:v3.1.0
        # imagePullPolicy: Always
        command: ["gangway", "-config", "/gangway/gangway.yaml"]
        env:
        - name: GANGWAY_SESSION_SECURITY_KEY
          valueFrom:
            secretKeyRef:
              # name: gangway-key
              name: session-security-key
              key: session-security-key
        - name: GANGWAY_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: client-secret
              key: client-secret
        - name: GANGWAY_PORT
          value: "8080"
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "512Mi"
        volumeMounts:
        - name: gangway
          mountPath: /gangway/
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 20
          timeoutSeconds: 1
          periodSeconds: 60
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          timeoutSeconds: 1
          periodSeconds: 10
          failureThreshold: 3
      volumes:
      - name: gangway
        configMap:
          name: gangway

# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: gangway
#   namespace: gangway
# data:
#   gangway.yaml: |
#     # The address to listen on. Defaults to 0.0.0.0 to listen on all interfaces.
#     # Env var: GANGWAY_HOST
#     # host: 0.0.0.0
#     # The port to listen on. Defaults to 8080.
#     # Env var: GANGWAY_PORT
#     # port: 8080
#     # Should Gangway serve TLS vs. plain HTTP? Default: false
#     # Env var: GANGWAY_SERVE_TLS
#     # serveTLS: false
#     # The public cert file (including root and intermediates) to use when serving
#     # TLS.
#     # Env var: GANGWAY_CERT_FILE
#     # certFile: /etc/gangway/tls/tls.crt
#     # The private key file when serving TLS.
#     # Env var: GANGWAY_KEY_FILE
#     # keyFile: /etc/gangway/tls/tls.key
#     # The cluster name. Used in UI and kubectl config instructions.
#     # Env var: GANGWAY_CLUSTER_NAME
#     clusterName: "codeformuenster"
#     # OAuth2 URL to start authorization flow.
#     # Env var: GANGWAY_AUTHORIZE_URL
#     authorizeURL: "https://keycloak.codeformuenster.org/auth/realms/codeformuenster/protocol/openid-connect/auth"
#     # OAuth2 URL to obtain access tokens.
#     # Env var: GANGWAY_TOKEN_URL
#     tokenURL: "https://keycloak.codeformuenster.org/auth/realms/codeformuenster/protocol/openid-connect/token"
#     # Endpoint that provides user profile information [optional]. Not all providers
#     # will require this.
#     # Env var: GANGWAY_AUDIENCE
#     audience: "https://keycloak.codeformuenster.org/auth/realms/codeformuenster/protocol/openid-connect/userinfo"
#     # Used to specify the scope of the requested Oauth authorization.
#     # scopes: ["openid", "profile", "email", "offline_access"]
#     # scopes: ["groups"]
#     # scopes: ["openid", "profile", "email", "offline_access", "groups"]
#     # Where to redirect back to. This should be a URL where gangway is reachable.
#     # Typically this also needs to be registered as part of the oauth application
#     # with the oAuth provider.
#     # Env var: GANGWAY_REDIRECT_URL
#     redirectURL: "https://gangway.codeformuenster.org/callback"
#     # API client ID as indicated by the identity provider
#     # Env var: GANGWAY_CLIENT_ID
#     # clientID: "3d63d86e-1523-420f-b046-741de05f9f98"
#     clientID: "kube-apiserver"
#     # clientID: "9ddadf8a-e37c-4f6d-8c7f-f41b67478bf2"
#     # clientID: "kube-apiserver"
#     # API client secret as indicated by the identity provider
#     # Env var: GANGWAY_CLIENT_SECRET
#     # clientSecret: ""
#     # Some identity providers accept an empty client secret, this
#     # is not generally considered a good idea. If you have to use an
#     # empty secret and accept the risks that come with that then you can
#     # set this to true.
#     #allowEmptyClientSecret: false
#     # The JWT claim to use as the username. This is used in UI.
#     # Default is "nickname". This is combined with the clusterName
#     # for the "user" portion of the kubeconfig.
#     # Env var: GANGWAY_USERNAME_CLAIM
#     # usernameClaim: "sub"
#     usernameClaim: "preferred_username"
#     emailClaim: "email"
#     # The API server endpoint used to configure kubectl
#     # Env var: GANGWAY_APISERVER_URL
#     # apiServerURL: "https://kube.codeformuenster.org:6443"
#     apiServerURL: "https://212.47.232.30:6443"
#     # The path to find the CA bundle for the API server. Used to configure kubectl.
#     # This is typically mounted into the default location for workloads running on
#     # a Kubernetes cluster and doesn't need to be set.
#     # Env var: GANGWAY_CLUSTER_CA_PATH
#     # cluster_ca_path: "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
#     # The path to a root CA to trust for self signed certificates at the Oauth2 URLs
#     # Env var: GANGWAY_TRUSTED_CA_PATH
#     #trustedCAPath: /cacerts/rootca.crt
#     # The path gangway uses to create urls (defaults to "")
#     # Env var: GANGWAY_HTTP_PATH
#     # httpPath: "https://${GANGWAY_HTTP_PATH}"

# ---
# secret
# kubectl -n gangway create secret generic gangway-key \
#   --from-literal=sesssionkey=$(openssl rand -base64 32)
#^ FIXME better like that:

# secret
# kubectl -n gangway create secret generic gangway_session_security_key \
#   --from-literal=gangway_session_security_key=$(openssl rand -base64 32)

# ---
# apiVersion: v1
# kind: Secret
# metadata:
#   name: session-security-key
#   namespace: gangway
# type: Opaque
# data:
#   session-security-key: "FIXME"

# ---
# apiVersion: v1
# kind: Secret
# metadata:
#   name: client-secret
#   namespace: gangway
# type: Opaque
# data:
#   client-secret: "FIXME"
