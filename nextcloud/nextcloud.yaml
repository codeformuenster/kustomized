apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: nextcloud
  labels:
    app.kubernetes.io/name: nextcloud
    app.kubernetes.io/component: server
  annotations:
  #   # maybe also see https://kubernetes.github.io/ingress-nginx/user-guide/miscellaneous/#proxy-protocol
  #   # FIXME https://github.com/nextcloud/docker/blob/master/.examples/docker-compose/with-nginx-proxy/mariadb/apache/proxy/uploadsize.conf
    # kubernetes.io/tls-acme: "true"
    # certmanager.k8s.io/cluster-issuer: letsencrypt
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/proxy-body-size: 20000M
    # nginx.ingress.kubernetes.io/client-body-buffer-size: 1M
    # nginx.ingress.kubernetes.io/cors-allow-headers: "X-Forwarded-For"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      location = /.well-known/carddav {
        return 301 https://$host/remote.php/dav;
      }
      location = /.well-known/caldav {
        return 301 https://$host/remote.php/dav;
      }
      location = /.well-known/webfinger {
        return 301 https://$host/public.php?service=webfinger;
      }
spec:
  rules:
  - host: nextcloud.example.com
    http:
      paths:
      - path: /
        backend:
          serviceName: nextcloud
          servicePort: 80
  tls:
  - secretName: nextcloud-tls
    hosts:
    - nextcloud.example.com

---
apiVersion: certmanager.k8s.io/v1alpha1
kind: Certificate
metadata:
  name: nextcloud-tls
  labels:
    app.kubernetes.io/name: nextcloud
    app.kubernetes.io/component: server
spec:
  secretName: nextcloud-tls
  commonName: nextcloud.example.com
  issuerRef:
    kind: ClusterIssuer
    name: letsencrypt

---
apiVersion: v1
kind: Service
metadata:
  name: nextcloud
  labels:
    app.kubernetes.io/name: nextcloud
    app.kubernetes.io/component: server
spec:
  ports:
  - name: http
    port: 80
    targetPort: http
  selector:
    app.kubernetes.io/name: nextcloud
    app.kubernetes.io/component: server

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nextcloud-redis
  labels:
    app.kubernetes.io/name: nextcloud
    app.kubernetes.io/component: server
data:
  redis.config.php: |
    <?php
    $CONFIG = array (
      'memcache.locking' => '\OC\Memcache\Redis',
      'redis' => array(
        'host' => 'redis',
        'port' => 6379,
      ),
    );

# ---
# apiVersion: v1
# kind: Secret
# metadata:
#   name: nextcloud
#   labels:
#     app.kubernetes.io/name: nextcloud
#     app.kubernetes.io/component: server
# data:
#   # openssl rand -base64 32 | tr -d "\n" | base64
#   nextcloud-admin-password:
#
# # kubectl -n nextcloud create secret generic nextcloud \
# #   --from-literal=nextcloud-admin-password=$(openssl rand -base64 32 | tr -d "\n" | base64)

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nextcloud
  labels:
    app.kubernetes.io/name: nextcloud
    app.kubernetes.io/component: server
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: nextcloud
      app.kubernetes.io/component: server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nextcloud
        app.kubernetes.io/component: server
    spec:
      containers:
      - name: nextcloud
        image: nextcloud:16.0.4-apache
        ports:
        - name: http
          containerPort: 80
        env:
        # - name: NEXTCLOUD_URL
        #   value: https://nextcloud.example.com
        - name: NEXTCLOUD_UPLOAD_MAX_FILESIZE
          value: 20G
        - name: NEXTCLOUD_TRUSTED_DOMAINS
          value: nextcloud.example.com
        - name: MYSQL_HOST
          value: mariadb
        - name: MYSQL_DATABASE
          value: nextcloud
        - name: MYSQL_USER
          value: nextcloud
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mariadb
              key: mysql-nextcloud-password
        # - name: VIRTUAL_HOST
        #   value:
        - name: NEXTCLOUD_ADMIN_USER
          value: admin
        - name: NEXTCLOUD_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: nextcloud
              key: nextcloud-admin-password
        volumeMounts:
        - name: nextcloud-redis-config
          mountPath: /usr/src/nextcloud/config/redis.config.php
          subPath: redis.config.php
        - name: data
          mountPath: /var/www/html
          subPath: root
        - name: data
          mountPath: /var/www/html/config
          subPath: config
        - name: data
          mountPath: /var/www/html/data
          subPath: data
        - name: data
          mountPath: /var/www/html/custom_apps
          subPath: custom_apps
        - name: data
          mountPath: /var/www/html/themes
          subPath: themes
      volumes:
      - name: nextcloud-redis-config
        configMap:
          name: nextcloud-redis
      - name: data
        persistentVolumeClaim:
          claimName: nextcloud-data
        # hostPath:
        #   path: /srv/nextcloud-data
        #   type: DirectoryOrCreate

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nextcloud-data
  label:
    app.kubernetes.io/name: nextcloud
    app.kubernetes.io/component: server
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 20G

---
# kubectl -n nextcloud create job --from=cronjob/nextcloud-webcron test-webcron

# FIXME don't run too often if there is an error
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: nextcloud-webcron
  labels:
    app.kubernetes.io/name: nextcloud
    app.kubernetes.io/component: server
spec:
  schedule: "*/5 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: Never
          containers:
          - name: webcron
            image: alpine:3.9
            command:
            - /usr/bin/wget
            - -O-
            - -q
            - http://nextcloud/cron.php
            # kubectl -n nextcloud exec -ti $nextcloud-pod-id -- \
            #   bash -c 'su -p -s /bin/sh www-data -c "php occ config:system:set --output plain trusted_domains 2 --value=nextcloud"'
